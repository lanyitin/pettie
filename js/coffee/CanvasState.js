// Generated by CoffeeScript 1.4.0
(function() {

  window.CanvasState = (function() {
    var _MouseState;

    _MouseState = {
      "up": "up",
      "down": "down"
    };

    function CanvasState(canvas) {
      var self;
      this.canvas = canvas;
      self = this;
      this.context = this.canvas.getContext("2d");
      this.drawables = [];
      this.canvas.addEventListener("click", function(evt) {
        var mousePos;
        evt.cancelBubble = true;
        evt.stopPropagation();
        mousePos = self.getMouse(evt);
        self.drawables.forEach(function(pElement) {
          if (pElement.click === "function" && pElement.contains(mousePos)) {
            return pElement.click(evt, mousePos);
          }
        });
      });
      this.canvas.addEventListener("mousedown", function(evt) {
        var drawable, mousePos, _i, _len, _ref;
        evt.cancelBubble = true;
        evt.stopPropagation();
        mousePos = self.getMouse(evt);
        _ref = self.drawables;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          drawable = _ref[_i];
          if (typeof drawable.mousedown === "function" && drawable.contains(mousePos)) {
            drawable.mousedown(evt, mousePos);
          }
        }
      });
      this.canvas.addEventListener("mouseup", function(evt) {
        var drawable, mousePos, _i, _len, _ref;
        evt.cancelBubble = true;
        evt.stopPropagation();
        mousePos = self.getMouse(evt);
        _ref = self.drawables;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          drawable = _ref[_i];
          if (typeof drawable.mouseup === "function" && drawable.contains(mousePos)) {
            drawable.mouseup(evt, mousePos);
          }
        }
      });
      this.canvas.addEventListener("mousemove", function(evt) {
        var drawable, mousePos, _i, _len, _ref;
        evt.cancelBubble = true;
        evt.stopPropagation();
        mousePos = self.getMouse(evt);
        _ref = self.drawables;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          drawable = _ref[_i];
          if (typeof drawable.mousemove === "function" && drawable.contains(mousePos)) {
            drawable.mousemove(evt, mousePos);
          }
        }
      });
    }

    CanvasState.prototype.addDrawable = function(pDrawable) {
      pDrawable.setContext(this.context);
      this.drawables.push(pDrawable);
    };

    CanvasState.prototype.getMouse = function(e) {
      var element, obj, offsetX, offsetY;
      element = this.canvas;
      offsetX = offsetY = 0;
      if (element.offsetParent !== void 0) {
        offsetX += element.offsetLeft;
        offsetY += element.offsetTop;
        while (element = element.offsetParent) {
          offsetX += element.offsetLeft;
          offsetY += element.offsetTop;
        }
      }
      obj = {
        x: e.pageX - offsetX,
        y: e.pageY - offsetY
      };
      return obj;
    };

    return CanvasState;

  })();

}).call(this);
