// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.CanvasState = (function() {
    var _MouseState;

    _MouseState = {
      "up": "up",
      "down": "down"
    };

    function CanvasState(canvas) {
      var self;
      this.canvas = canvas;
      self = this;
      this.context = this.canvas.getContext("2d");
      this.drawables = [];
      this.canOpWork = true;
      this.canvas.addEventListener("click", function(evt) {
        var mousePos;
        evt.cancelBubble = true;
        evt.stopPropagation();
        mousePos = self.getMouse(evt);
        if (self.canOpWork) {
          self.drawables.forEach(function(pElement) {
            if (typeof pElement.click === "function" && pElement.contains(mousePos)) {
              return pElement.click(evt, mousePos);
            }
          });
        }
      });
      this.canvas.addEventListener("mousedown", function(evt) {
        var drawable, mousePos, _i, _len, _ref;
        evt.cancelBubble = true;
        evt.stopPropagation();
        mousePos = self.getMouse(evt);
        _ref = self.drawables;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          drawable = _ref[_i];
          if (typeof drawable.mousedown === "function" && drawable.contains(mousePos)) {
            drawable.mousedown(evt, mousePos);
          }
        }
      });
      this.canvas.addEventListener("mouseup", function(evt) {
        var drawable, mousePos, _i, _len, _ref;
        evt.cancelBubble = true;
        evt.stopPropagation();
        mousePos = self.getMouse(evt);
        _ref = self.drawables;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          drawable = _ref[_i];
          if (typeof drawable.mouseup === "function" && drawable.contains(mousePos)) {
            drawable.mouseup(evt, mousePos);
          }
        }
      });
      this.canvas.addEventListener("mousemove", function(evt) {
        var drawable, mousePos, _i, _len, _ref;
        evt.cancelBubble = true;
        evt.stopPropagation();
        mousePos = self.getMouse(evt);
        _ref = self.drawables;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          drawable = _ref[_i];
          if (typeof drawable.mousemove === "function" && drawable.contains(mousePos)) {
            drawable.mousemove(evt, mousePos);
          }
        }
      });
    }

    CanvasState.prototype.addDrawable = function(pDrawable) {
      pDrawable.setContext(this.context);
      this.drawables.push(pDrawable);
    };

    CanvasState.prototype.getMouse = function(e) {
      var element, obj, offsetX, offsetY;
      element = this.canvas;
      offsetX = offsetY = 0;
      if (element.offsetParent !== void 0) {
        offsetX += element.offsetLeft;
        offsetY += element.offsetTop;
        while (element = element.offsetParent) {
          offsetX += element.offsetLeft;
          offsetY += element.offsetTop;
        }
      }
      obj = {
        x: e.pageX - offsetX,
        y: e.pageY - offsetY
      };
      return obj;
    };

    return CanvasState;

  })();

  window.Drawable = (function() {

    function Drawable(x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width != null ? width : 0;
      this.height = height != null ? height : 0;
      this.setFillStyle();
      this.setStrokeStyle();
      this.setFont();
      this.setTextBaseline();
      this.setLineWidth();
      this.setFill();
      this.setOffsetX();
      this.setOffsetY();
      this.setRotation();
    }

    Drawable.prototype.setX = function(x) {
      this.x = x != null ? x : 0;
    };

    Drawable.prototype.getX = function() {
      return this.x;
    };

    Drawable.prototype.setY = function(y) {
      this.y = y != null ? y : 0;
    };

    Drawable.prototype.getY = function() {
      return this.y;
    };

    Drawable.prototype.setOffsetX = function(offsetX) {
      this.offsetX = offsetX != null ? offsetX : 0;
    };

    Drawable.prototype.getOffsetX = function() {
      return this.offsetX;
    };

    Drawable.prototype.setOffsetY = function(offsetY) {
      this.offsetY = offsetY != null ? offsetY : 0;
    };

    Drawable.prototype.getOffsetY = function() {
      return this.offsetY;
    };

    Drawable.prototype.setWidth = function(width) {
      this.width = width != null ? width : 0;
    };

    Drawable.prototype.getWidth = function() {
      return this.width;
    };

    Drawable.prototype.setHeight = function(height) {
      this.height = height != null ? height : 0;
    };

    Drawable.prototype.getHeight = function() {
      return this.height;
    };

    Drawable.prototype.setFillStyle = function(fillStyle) {
      this.fillStyle = fillStyle != null ? fillStyle : "black";
    };

    Drawable.prototype.getFillStyle = function() {
      return this.fillStyle;
    };

    Drawable.prototype.setStrokeStyle = function(strokeStyle) {
      this.strokeStyle = strokeStyle != null ? strokeStyle : "black";
    };

    Drawable.prototype.getStrokeStyle = function() {
      return this.strokeStyle;
    };

    Drawable.prototype.setFont = function(font) {
      this.font = font != null ? font : "16px sans-serif";
    };

    Drawable.prototype.getFont = function() {
      return this.font;
    };

    Drawable.prototype.setTextBaseline = function(textBaseline) {
      this.textBaseline = textBaseline != null ? textBaseline : "top";
    };

    Drawable.prototype.getTextBaseline = function() {
      return this.textBaseline;
    };

    Drawable.prototype.setContext = function(context) {
      this.context = context;
    };

    Drawable.prototype.getContext = function() {
      return this.context;
    };

    Drawable.prototype.setLineWidth = function(lineWidth) {
      this.lineWidth = lineWidth != null ? lineWidth : 1;
    };

    Drawable.prototype.getLineWidth = function() {
      return this.lineWidth;
    };

    Drawable.prototype.setFill = function(fill) {
      this.fill = fill != null ? fill : 1;
    };

    Drawable.prototype.getFill = function() {
      return this.fill;
    };

    Drawable.prototype.setRotation = function(rotation) {
      this.rotation = rotation != null ? rotation : 0;
    };

    Drawable.prototype.getRotation = function() {
      return this.rotation;
    };

    Drawable.prototype.configContext = function() {
      this.context.save();
      this.context.fillStyle = this.fillStyle;
      this.context.strokeStyle = this.strokeStyle;
      this.context.font = this.font;
      this.context.textBaseline = this.textBaseline;
      this.context.lineWidth = this.lineWidth;
      this.context.rotate(this.rotation);
    };

    Drawable.prototype.restoreContext = function() {
      this.context.restore();
    };

    Drawable.prototype.draw = function() {
      this.configContext();
      this.onDraw();
      this.restoreContext();
    };

    Drawable.prototype.onDraw = function() {
      throw new Error("please implement onDraw method for", this);
    };

    Drawable.prototype.contains = function() {
      throw new Error("please implement contains method for", this);
    };

    return Drawable;

  })();

  window.RectDrawable = (function(_super) {

    __extends(RectDrawable, _super);

    function RectDrawable(x, y, width, height) {
      RectDrawable.__super__.constructor.call(this, x, y, width, height);
      return;
    }

    RectDrawable.prototype.onDraw = function() {
      if (this.getFill()) {
        this.context.fillRect(this.x + this.getOffsetX(), this.y + this.getOffsetY(), this.width, this.height);
      } else {
        this.context.strokeRect(this.x + this.getOffsetX(), this.y + this.getOffsetY(), this.width, this.height);
      }
    };

    RectDrawable.prototype.contains = function(pLocation) {
      var beginX, beginY, endX, endY;
      beginX = this.getX();
      endX = this.getX() + this.getWidth();
      beginY = this.getY();
      endY = this.getY() + this.getHeight();
      if ((pLocation.x <= endX && pLocation.x >= beginX) && (pLocation.y <= endY && pLocation.y >= beginY)) {
        return true;
      } else {
        return false;
      }
    };

    return RectDrawable;

  })(Drawable);

  window.TextDrawable = (function(_super) {

    __extends(TextDrawable, _super);

    function TextDrawable(text, x, y, width, height) {
      TextDrawable.__super__.constructor.call(this, x, y, width, height);
      this.setText(text);
      return;
    }

    TextDrawable.prototype.setText = function(text) {
      this.text = text;
    };

    TextDrawable.prototype.getText = function() {
      return this.text;
    };

    TextDrawable.prototype.onDraw = function() {
      this.setHeight(parseInt(this.font, 10));
      if (this.getFill()) {
        this.context.fillText(this.getText(), this.getX() + this.getOffsetX(), this.getY() + this.getOffsetY());
      } else {
        this.context.strokeText(this.getText(), this.getX() + this.getOffsetX(), this.getY() + this.getOffsetY());
      }
    };

    TextDrawable.prototype.contains = function(pLocation) {
      var beginX, beginY, endX, endY;
      beginX = this.getX();
      endX = this.getX() + this.getWidth();
      beginY = this.getY();
      endY = this.getY() + this.getHeight();
      if ((pLocation.x <= endX && pLocation.x >= beginX) && (pLocation.y >= beginY && pLocation.y <= endY)) {
        return true;
      } else {
        return false;
      }
    };

    TextDrawable.prototype.getWidth = function() {
      var tMatrix, tWidth;
      this.configContext();
      tMatrix = this.context.measureText(this.text);
      tWidth = tMatrix.width;
      this.setWidth(tWidth);
      this.restoreContext();
      return this.width;
    };

    return TextDrawable;

  })(Drawable);

  window.ImageDrawable = (function(_super) {

    __extends(ImageDrawable, _super);

    function ImageDrawable(image, x, y, width, height) {
      this.image = image;
      ImageDrawable.__super__.constructor.call(this, x, y, width, height);
    }

    ImageDrawable.prototype.onDraw = function() {
      if (this.getWidth() && this.getHeight()) {
        return this.context.drawImage(this.image, this.x + this.getOffsetX(), this.y + this.getOffsetY(), this.width, this.height);
      } else {
        this.context.drawImage(this.image, this.x, this.y);
        this.setWidth(this.image.width);
        return this.setHeight(this.image.height);
      }
    };

    ImageDrawable.prototype.setImg = function(image) {
      this.image = image;
      console.assert(this.image.src !== void 0);
    };

    return ImageDrawable;

  })(RectDrawable);

  window.ArcDrawable = (function(_super) {

    __extends(ArcDrawable, _super);

    function ArcDrawable(radius, startAngel, endAngel, x, y) {
      this.radius = radius;
      this.startAngel = startAngel != null ? startAngel : 0;
      this.endAngel = endAngel != null ? endAngel : 360;
      ArcDrawable.__super__.constructor.call(this, x, y);
    }

    ArcDrawable.prototype.setRadius = function(radius) {
      this.radius = radius;
    };

    ArcDrawable.prototype.getRadius = function() {
      return this.radius;
    };

    ArcDrawable.prototype.setStartAngel = function(startAngel) {
      this.startAngel = startAngel;
    };

    ArcDrawable.prototype.getStartAngel = function() {
      return this.startAngel;
    };

    ArcDrawable.prototype.setEndAngel = function(endAngel) {
      this.endAngel = endAngel;
    };

    ArcDrawable.prototype.getEndAngel = function() {
      return this.endAngel;
    };

    ArcDrawable.prototype.onDraw = function() {
      this.context.beginPath();
      this.context.arc(this.getX() + this.getOffsetX(), this.getY() + this.getOffsetY(), this.getRadius(), this.getStartAngel(), this.getEndAngel(), true);
      if (this.getFill()) {
        this.context.fill();
      } else {
        this.context.stroke();
      }
    };

    ArcDrawable.prototype.contains = function(pLocation) {
      if ((pMousePos.x < this.getX() + this.getRadius()) && (pMousePos.x > this.getX() - this.getRadius()) && ((pMousePos.x < this.getX() + this.getRadius()) && (pMousePos.x > this.getX() - this.getRadius()))) {
        return true;
      } else {
        return false;
      }
    };

    return ArcDrawable;

  })(Drawable);

  window.View = (function(_super) {

    __extends(View, _super);

    function View(config) {
      View.__super__.constructor.call(this, config.x, config.y, config.width, config.height);
      this.subView = [];
    }

    View.prototype.add = function(pDrawable) {
      pDrawable.setContext(this.context);
      this.subView.push(pDrawable);
    };

    View.prototype.setContext = function(context) {
      View.__super__.setContext.call(this, context);
      this.subView.forEach(function(pElement) {
        pElement.setContext(context);
      });
    };

    return View;

  })(Drawable);

  window.PrograssBar = (function(_super) {

    __extends(PrograssBar, _super);

    function PrograssBar(config) {
      this.value = config.value;
      this.maxValue = config.maxValue;
      this.fillBlock = new RectDrawable(config.x, config.y, (this.getDrawingRectWidth(config.value, config.maxValue) / config.maxValue) * config.width, config.height);
      this.fillBlock.setFill(1);
      this.fillBlock.setLineWidth(0);
      this.strokeBlock = new RectDrawable(config.x, config.y, config.width, config.height);
      this.strokeBlock.setFill(0);
      PrograssBar.__super__.constructor.call(this, config);
      this.add(this.fillBlock);
      this.add(this.strokeBlock);
      return;
    }

    PrograssBar.prototype.setValue = function(value) {
      this.value = value;
      if (this.value < 0) {
        this.value = 0;
      }
      this.fillBlock.setWidth((this.getDrawingRectWidth(this.value, this.maxValue) / this.maxValue) * this.width);
    };

    PrograssBar.prototype.onDraw = function() {
      this.fillBlock.draw();
      this.strokeBlock.draw();
    };

    PrograssBar.prototype.contains = RectDrawable.prototype.contains;

    PrograssBar.prototype.setOffsetX = function(offsetX) {
      this.offsetX = offsetX;
      this.fillBlock.setOffsetX(this.offsetX);
      this.strokeBlock.setOffsetX(this.offsetX);
    };

    PrograssBar.prototype.setOffsetY = function(offsetY) {
      this.offsetY = offsetY;
      this.fillBlock.setOffsetY(this.offsetY);
      this.strokeBlock.setOffsetY(this.offsetY);
    };

    PrograssBar.prototype.setFillStyle = function(fillStyle) {
      this.fillStyle = fillStyle;
      this.fillBlock.setFillStyle(this.fillStyle);
    };

    PrograssBar.prototype.setStrokeStyle = function(strokeStyle) {
      this.strokeStyle = strokeStyle;
      this.strokeBlock.setStrokeStyle(this.strokeStyle);
    };

    PrograssBar.prototype.getDrawingRectWidth = function(currentValue, maxValue) {
      while (currentValue > maxValue) {
        currentValue -= maxValue;
      }
      return currentValue;
    };

    return PrograssBar;

  })(View);

  window.AttributeBar = (function(_super) {

    __extends(AttributeBar, _super);

    function AttributeBar(config) {
      this.value = config.value;
      this.maxValue = config.maxValue;
      this.caption = config.caption;
      this.captionText = new TextDrawable(this.caption, config.x, config.y);
      this.prograssbar = new PrograssBar({
        x: config.x,
        y: config.y,
        width: 100,
        height: 16,
        value: this.value,
        maxValue: this.maxValue
      });
      this.valueText = new TextDrawable("" + this.value + "/" + this.maxValue, config.x, config.y);
      AttributeBar.__super__.constructor.call(this, config);
      this.add(this.captionText);
      this.add(this.prograssbar);
      this.add(this.valueText);
      return;
    }

    AttributeBar.prototype.onDraw = function() {
      var padding, _ref;
      padding = 5;
      this.prograssbar.setOffsetX(this.captionText.getWidth() + padding);
      this.valueText.setOffsetX(this.captionText.getWidth() + this.prograssbar.getWidth() + padding);
      this.captionText.draw();
      if ((this.value / this.maxValue) >= 0.75) {
        this.setFillStyle("green");
      } else if ((0.25 <= (_ref = this.value / this.maxValue) && _ref < 0.75)) {
        this.setFillStyle("orange");
      } else if (0.25 > (this.value / this.maxValue)) {
        this.setFillStyle("red");
      }
      this.prograssbar.draw();
      this.valueText.draw();
    };

    AttributeBar.prototype.setText = function(text) {
      this.text = text;
      this.captionText.setText(this.text);
    };

    AttributeBar.prototype.setValue = function(value) {
      this.value = value;
      this.value = parseInt(this.value);
      this.prograssbar.setValue(this.value);
      this.valueText.setText("" + this.value + "/" + this.maxValue);
    };

    AttributeBar.prototype.setFillStyle = function(fillStyle) {
      this.prograssbar.setFillStyle(fillStyle);
    };

    AttributeBar.prototype.setStrokeStyle = function(strokeStyle) {
      this.prograssbar.setStrokeStyle(strokeStyle);
    };

    AttributeBar.prototype.setFont = function(font) {
      this.font = font;
      this.captionText.setFont(this.font);
      return this.valueText.setFont(this.font);
    };

    AttributeBar.prototype.contains = function(pLocation) {
      if ((pLocation.x > this.captionText.x && pLocation.x < this.valueText.x + this.valueText.width) && (pLocation.y > this.y && pLocation < this.prograssbar.y + this.prograssbar.height)) {
        return true;
      } else {
        return false;
      }
    };

    return AttributeBar;

  })(View);

  window.Spirit = (function(_super) {

    __extends(Spirit, _super);

    function Spirit(config) {
      Spirit.__super__.constructor.call(this, 0, 0, config.width, config.height);
      this.imgSource = config.img;
      this.movingPx = config.movingPixel;
      this.actiontypes = config.actiontypes;
      this.actionstates = config.actionstates;
      this.currentAction = this.actiontypes.staying;
      this.currentState = this.actionstates.staying0;
      return;
    }

    Spirit.prototype.contains = function(pos) {
      var _ref, _ref1;
      return (this.x < (_ref = pos.x) && _ref < this.x + this.width) && (this.y < (_ref1 = pos.y) && _ref1 < this.y + this.width);
    };

    Spirit.prototype.onDraw = function() {
      this.consumeState();
      this.x += this.currentState.offsetX * this.movingPx;
      this.y += this.currentState.offsetY * this.movingPx;
      return this.context.drawImage(this.imgSource, this.currentState.image_col_index * this.width, this.currentState.image_row_index * this.height, this.width, this.height, this.x, this.y, this.width, this.height);
    };

    Spirit.prototype.consumeState = function() {
      if (this.currentAction !== null && this.currentAction !== void 0) {
        this.currentState = ActionStates[this.currentState[this.currentAction]];
      }
    };

    return Spirit;

  })(Drawable);

  window.ExpBar = (function(_super) {

    __extends(ExpBar, _super);

    function ExpBar(config) {
      ExpBar.__super__.constructor.call(this, config.x, config.y, config.width, config.height);
      this.baseImg = config.baseImg;
      this.maskImg = config.maskImg;
      this.percentage = 0;
      this.baseCanvas = document.createElement("canvas");
      this.baseContext = this.baseCanvas.getContext("2d");
      this.bufferCanvas = document.createElement("canvas");
      this.bufferContext = this.bufferCanvas.getContext("2d");
      this.baseCanvas.width = this.width;
      this.baseCanvas.height = this.height;
      this.bufferCanvas.width = this.width;
      this.bufferCanvas.height = this.height * 2;
      this.bufferContext.drawImage(this.maskImg, 0, 0, this.width, this.height);
      this.baseContext.drawImage(this.baseImg, 0, 0, this.width, this.height);
      return;
    }

    ExpBar.prototype.setPercentage = function(percentage) {
      this.percentage = percentage;
    };

    ExpBar.prototype.onDraw = function() {
      var baseData, bufferData, i, maskData, self, _i, _j, _ref, _ref1;
      self = this;
      this.bufferContext.clearRect(0, this.height, this.width, this.height);
      (function(offsetY, height) {
        return self.bufferContext.fillRect(0, self.height + offsetY, self.width, height);
      })(15 + (this.height - 10 - 15) * (1 - this.percentage), (this.height - 10 - 15) * this.percentage + 10);
      bufferData = this.bufferContext.getImageData(0, this.height, this.width, this.height);
      for (i = _i = 0, _ref = bufferData.data.length - 3; _i <= _ref; i = _i += 4) {
        if (bufferData.data[0] === 255 && bufferData.data[1] === 255 && bufferData.data[2] === 255) {
          bufferData.data[i + 3] = 0;
        }
      }
      maskData = this.bufferContext.getImageData(0, 0, this.width, this.height);
      baseData = this.baseContext.getImageData(0, 0, this.width, this.height);
      for (i = _j = 3, _ref1 = bufferData.data.length; _j <= _ref1; i = _j += 4) {
        bufferData.data[i] = this.getTransparentForBorder(this.getTransparentForMask(bufferData.data[i], maskData.data[i]), baseData.data[i]);
      }
      this.bufferContext.putImageData(bufferData, 0, this.height);
      this.context.drawImage(this.bufferCanvas, 0, this.height, this.width, this.height, this.x, this.y, this.width, this.height);
    };

    ExpBar.prototype.getTransparentForMask = function(buffer, mask) {
      if (buffer > 200 && mask > 200) {
        return 255;
      } else {
        return 0;
      }
    };

    ExpBar.prototype.getTransparentForBorder = function(buffer, border) {
      if (buffer > 200 || border > 200) {
        return 255;
      } else {
        return 0;
      }
    };

    ExpBar.prototype.contains = RectDrawable.prototype.contains;

    return ExpBar;

  })(Drawable);

  window.LinearLayout = (function(_super) {

    __extends(LinearLayout, _super);

    function LinearLayout(config) {
      LinearLayout.__super__.constructor.call(this, config.x, config.y, config.width, config.height);
      this.subView = [];
    }

    LinearLayout.prototype.add = function(pDrawable) {
      pDrawable.setContext(this.context);
      this.subView.push(pDrawable);
    };

    LinearLayout.prototype.setContext = function(context) {
      LinearLayout.__super__.setContext.call(this, context);
      this.subView.forEach(function(pElement) {
        pElement.setContext(context);
      });
    };

    LinearLayout.prototype.onDraw = function() {
      var drawable, _i, _len, _ref;
      _ref = this.subView;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        drawable = _ref[_i];
        if (_i === 0) {
          drawable.setX(this.x);
          drawable.setY(this.y);
        } else {
          drawable.setX(this.subView[_i - 1].x + this.subView[_i - 1].width);
          drawable.setY(this.y);
        }
        drawable.draw();
      }
    };

    LinearLayout.prototype.contains = function(pLocation) {
      var result, view, _i, _len, _ref;
      result = false;
      _ref = this.subView;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        view = _ref[_i];
        if (view.contains(pLocation)) {
          result = true;
        }
      }
      return result;
    };

    return LinearLayout;

  })(Drawable);

}).call(this);
